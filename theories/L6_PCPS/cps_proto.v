(* Expressions and contexts isomorphic to those defined in cps.v and ctx.v.
   We define a separate copy of these because:
   - The MetaCoq in Prototype.v doesn't support treating AST types defined with type aliases
     like [var] and [fun_tag] differently.
   - Even if it were OK to treat them the same, rewriting the definition of [exp] to use
     the raw [positive] type and then defining the aliases afterwards breaks proofs about
     [exp]s that make use of autogenerated names, because Coq uses constructor argument
     types for name generation.
   - Prototype.v additionally generates a type of one-hole contexts for [exp] trees and
     we have to explain how this type relates to [exp_ctx] and [fundefs_ctx].

   The actual definition of [exp] is in cps_proto_metacoq.v because the MetaCoq takes a
   lot of time and space (~6 GB) to run (most of this is for quoting exp_aux_data). *)

From Coq Require Import ZArith.ZArith Lists.List.
Import ListNotations.

Require Import CertiCoq.L6.Prototype.
Require Export CertiCoq.L6.cps_proto_metacoq.

Print exp_univ.
Print exp_univD.
Print exp_frame_t.
Print exp_frameD.
Print exp_Frame_ops.

(* The type of one-hole contexts *)
Definition exp_c : exp_univ -> exp_univ -> Set := frames_t.

(* -------------------- exp is isomorphic to cps.exp -------------------- *)

Require CertiCoq.L6.cps.

Definition strip_vars : list var -> list cps.var := map (fun '(mk_var x) => x).

Fixpoint exp_of_proto (e : exp) : cps.exp :=
  match e with
  | Econstr (mk_var x) (mk_ctor_tag c) ys e => cps.Econstr x c (strip_vars ys) (exp_of_proto e)
  | Ecase (mk_var x) ces => cps.Ecase x (map (fun '(mk_ctor_tag c, e) => (c, exp_of_proto e)) ces)
  | Eproj (mk_var x) (mk_ctor_tag c) n (mk_var y) e => cps.Eproj x c n y (exp_of_proto e)
  | Eletapp (mk_var x) (mk_var f) (mk_fun_tag ft) ys e =>
    cps.Eletapp x f ft (strip_vars ys) (exp_of_proto e)
  | Efun fds e => cps.Efun (fundefs_of_proto fds) (exp_of_proto e)
  | Eapp (mk_var f) (mk_fun_tag ft) xs => cps.Eapp f ft (strip_vars xs)
  | Eprim (mk_var x) (mk_prim p) ys e => cps.Eprim x p (strip_vars ys) (exp_of_proto e)
  | Ehalt (mk_var x) => cps.Ehalt x
  end
with fundefs_of_proto (fds : fundefs) : cps.fundefs :=
  match fds with
  | Fcons (mk_var f) (mk_fun_tag ft) xs e fds =>
    cps.Fcons f ft (strip_vars xs) (exp_of_proto e) (fundefs_of_proto fds)
  | Fnil => cps.Fnil
  end.

Fixpoint proto_of_exp (e : cps.exp) : exp :=
  match e with
  | cps.Econstr x c ys e => Econstr (mk_var x) (mk_ctor_tag c) (map mk_var ys) (proto_of_exp e)
  | cps.Ecase x ces => Ecase (mk_var x) (map (fun '(c, e) => (mk_ctor_tag c, proto_of_exp e)) ces)
  | cps.Eproj x c n y e => Eproj (mk_var x) (mk_ctor_tag c) n (mk_var y) (proto_of_exp e)
  | cps.Eletapp x f ft ys e =>
    Eletapp (mk_var x) (mk_var f) (mk_fun_tag ft) (map mk_var ys) (proto_of_exp e)
  | cps.Efun fds e => Efun (proto_of_fundefs fds) (proto_of_exp e)
  | cps.Eapp f ft ys => Eapp (mk_var f) (mk_fun_tag ft) (map mk_var ys)
  | cps.Eprim x p ys e => Eprim (mk_var x) (mk_prim p) (map mk_var ys) (proto_of_exp e)
  | cps.Ehalt x => Ehalt (mk_var x)
  end
with proto_of_fundefs (fds : cps.fundefs) : fundefs :=
  match fds with
  | cps.Fcons f ft xs e fds =>
    Fcons (mk_var f) (mk_fun_tag ft) (map mk_var xs) (proto_of_exp e) (proto_of_fundefs fds)
  | cps.Fnil => Fnil
  end.

Lemma strip_vars_map xs : strip_vars (map mk_var xs) = xs.
Proof. induction xs as [|x xs IHxs]; simpl; congruence. Qed.

Fixpoint exp_proto_exp e : exp_of_proto (proto_of_exp e) = e
with fundefs_proto_fundefs fds : fundefs_of_proto (proto_of_fundefs fds) = fds.
Proof.
  - destruct e; simpl; try rewrite strip_vars_map; try congruence.
    induction l as [|[c e] ces IHces]; [reflexivity|]; simpl.
    inversion IHces.
    repeat rewrite H0.
    repeat f_equal.
    now apply exp_proto_exp.
  - destruct fds; simpl; try rewrite strip_vars_map; congruence.
Qed.

Lemma map_strip_vars xs : map mk_var (strip_vars xs) = xs.
Proof. induction xs as [|[x] xs IHxs]; simpl; congruence. Qed.

Local Ltac destruct_sings :=
  repeat match goal with |- context [match ?x with _ => _ end] => destruct x as [x]; simpl end.

Fixpoint proto_exp_proto e : proto_of_exp (exp_of_proto e) = e
with proto_fundefs_proto fds : proto_of_fundefs (fundefs_of_proto fds) = fds.
Proof.
  - destruct e; simpl; destruct_sings; try rewrite map_strip_vars; try congruence.
    induction ces as [|[[c] e] ces IHces]; [reflexivity|]; simpl.
    inversion IHces.
    repeat rewrite H0.
    repeat f_equal.
    now apply proto_exp_proto.
  - destruct fds; simpl; destruct_sings; try rewrite map_strip_vars; congruence.
Qed.

(* ---------- exp_c with the right indices is isomorphic to cps.exp_ctx and cps.fundefs_ctx ---------- *)
